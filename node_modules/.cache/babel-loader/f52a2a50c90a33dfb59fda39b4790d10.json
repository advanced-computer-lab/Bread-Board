{"ast":null,"code":"const Flight = require(\"../models/flightModel\");\n\nconst createFlight = async (req, res) => {\n  const flight = new Flight({\n    flightNumber: req.body.flightNumber,\n    departureTime: req.body.departureTime,\n    arrivalTime: req.body.arrivalTime,\n    numberofEconomySeats: req.body.numberofEconomySeats,\n    arrivalDate: req.body.arrivalDate,\n    departureDate: req.body.departureDate,\n    numberofBusinessSeats: req.body.numberofBusinessSeats,\n    airport: req.body.airport\n  });\n  await flight.save();\n  res.send(\"Inserted Data\");\n};\n\nconst searchFlight = (req, res) => {\n  const flight = new Flight({\n    airport: \"h\"\n  });\n  res.send(flight);\n};\n\nconst showFlight = async (req, res) => {\n  Flight.find({}, (err, result) => {\n    if (err) {\n      res.send(err);\n    } else {\n      res.send(result);\n    }\n  });\n};\n\nconst updateFlight = (req, res) => {\n  const id = req.body.id;\n  const newFlightNumber = req.body.newFlightNumber;\n  const newDepartureTime = req.body.newDepartureTime;\n  const newArrivalTime = req.body.newArrivalTime;\n  const newEconomySeats = req.body.newEconomySeats;\n  const newArrivalDate = req.body.newArrivalDate;\n  const newDepartureDate = req.body.newDepartureDate;\n  const newBusinessSeats = req.body.newBusinessSeats;\n  const newAirport = req.body.newAirport;\n\n  try {\n    Flight.findById(id, (error, flightToUpdate) => {\n      flightToUpdate.flightNumber = newFlightNumber == null ? flightToUpdate.flightNumber : Number(newFlightNumber);\n      flightToUpdate.departureTime = newDepartureTime == null ? flightToUpdate.departureTime : newDepartureTime;\n      flightToUpdate.arrivalTime = newArrivalTime == null ? flightToUpdate.arrivalTime : newArrivalTime;\n      flightToUpdate.numberofEconomySeats = newEconomySeats == null ? flightToUpdate.numberofEconomySeats : Number(newEconomySeats);\n      flightToUpdate.arrivalDate = newArrivalDate == null ? flightToUpdate.arrivalDate : newArrivalDate;\n      flightToUpdate.departureDate = newDepartureDate == null ? flightToUpdate.departureDate : newDepartureDate;\n      flightToUpdate.numberofBusinessSeats = newBusinessSeats == null ? flightToUpdate.numberofBusinessSeats : Number(newBusinessSeats);\n      flightToUpdate.airport = newAirport == null ? flightToUpdate.airport : newAirport;\n      flightToUpdate.save();\n    });\n  } catch (err) {\n    console.log(err);\n  }\n\n  res.send(\"updated\");\n};\n\nconst deleteFlight = async (req, res) => {\n  const id = req.params.id;\n  await Flight.findByIdAndRemove(id).exec();\n  res.send(\"item deleted\");\n};\n\nmodule.exports = {\n  createFlight,\n  searchFlight,\n  updateFlight,\n  deleteFlight,\n  showFlight\n};","map":{"version":3,"sources":["/Users/abdulrahman_dahrawy/Documents/GitHub/Bread-Board/src/backEnd/src/Controller/FlightController.js"],"names":["Flight","require","createFlight","req","res","flight","flightNumber","body","departureTime","arrivalTime","numberofEconomySeats","arrivalDate","departureDate","numberofBusinessSeats","airport","save","send","searchFlight","showFlight","find","err","result","updateFlight","id","newFlightNumber","newDepartureTime","newArrivalTime","newEconomySeats","newArrivalDate","newDepartureDate","newBusinessSeats","newAirport","findById","error","flightToUpdate","Number","console","log","deleteFlight","params","findByIdAndRemove","exec","module","exports"],"mappings":"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","sourcesContent":["const Flight = require(\"../models/flightModel\");\n\nconst createFlight = async (req, res) => {\n  const flight = new Flight({\n    flightNumber: req.body.flightNumber,\n    departureTime: req.body.departureTime,\n    arrivalTime: req.body.arrivalTime,\n    numberofEconomySeats: req.body.numberofEconomySeats,\n    arrivalDate: req.body.arrivalDate,\n    departureDate: req.body.departureDate,\n    numberofBusinessSeats: req.body.numberofBusinessSeats,\n    airport: req.body.airport,\n  });\n  await flight.save();\n  res.send(\"Inserted Data\");\n};\n\nconst searchFlight = (req, res) => {\n  const flight = new Flight({\n    airport: \"h\",\n  });\n  res.send(flight);\n};\n\nconst showFlight = async (req, res) => {\n  Flight.find({}, (err, result) => {\n    if (err) {\n      res.send(err);\n    } else {\n      res.send(result);\n    }\n  });\n};\n\nconst updateFlight = (req, res) => {\n  const id = req.body.id;\n  const newFlightNumber = req.body.newFlightNumber;\n  const newDepartureTime = req.body.newDepartureTime;\n  const newArrivalTime = req.body.newArrivalTime;\n  const newEconomySeats = req.body.newEconomySeats;\n  const newArrivalDate = req.body.newArrivalDate;\n  const newDepartureDate = req.body.newDepartureDate;\n  const newBusinessSeats = req.body.newBusinessSeats;\n  const newAirport = req.body.newAirport;\n  try {\n    Flight.findById(id, (error, flightToUpdate) => {\n      flightToUpdate.flightNumber =\n        newFlightNumber == null\n          ? flightToUpdate.flightNumber\n          : Number(newFlightNumber);\n      flightToUpdate.departureTime =\n        newDepartureTime == null\n          ? flightToUpdate.departureTime\n          : newDepartureTime;\n      flightToUpdate.arrivalTime =\n        newArrivalTime == null ? flightToUpdate.arrivalTime : newArrivalTime;\n      flightToUpdate.numberofEconomySeats =\n        newEconomySeats == null\n          ? flightToUpdate.numberofEconomySeats\n          : Number(newEconomySeats);\n      flightToUpdate.arrivalDate =\n        newArrivalDate == null ? flightToUpdate.arrivalDate : newArrivalDate;\n      flightToUpdate.departureDate =\n        newDepartureDate == null\n          ? flightToUpdate.departureDate\n          : newDepartureDate;\n      flightToUpdate.numberofBusinessSeats =\n        newBusinessSeats == null\n          ? flightToUpdate.numberofBusinessSeats\n          : Number(newBusinessSeats);\n      flightToUpdate.airport =\n        newAirport == null ? flightToUpdate.airport : newAirport;\n      flightToUpdate.save();\n    });\n  } catch (err) {\n    console.log(err);\n  }\n  res.send(\"updated\");\n};\n\nconst deleteFlight = async (req, res) => {\n  const id = req.params.id;\n  await Flight.findByIdAndRemove(id).exec();\n  res.send(\"item deleted\");\n};\n\nmodule.exports = {\n  createFlight,\n  searchFlight,\n  updateFlight,\n  deleteFlight,\n  showFlight,\n};\n"]},"metadata":{},"sourceType":"module"}